// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_info.proto

#include "task_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pagination_task_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_Navigation_task_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRecord_task_5finfo_2eproto;
namespace pai {
namespace pouw {
namespace task_info {
class TaskListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskListRequest> _instance;
} _TaskListRequest_default_instance_;
class TaskRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskRecord> _instance;
} _TaskRecord_default_instance_;
class Pagination_NavigationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination_Navigation> _instance;
} _Pagination_Navigation_default_instance_;
class PaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class TaskListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskListResponse> _instance;
} _TaskListResponse_default_instance_;
}  // namespace task_info
}  // namespace pouw
}  // namespace pai
static void InitDefaultsscc_info_Pagination_task_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pai::pouw::task_info::_Pagination_default_instance_;
    new (ptr) ::pai::pouw::task_info::Pagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pai::pouw::task_info::Pagination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pagination_task_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pagination_task_5finfo_2eproto}, {
      &scc_info_Pagination_Navigation_task_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_Pagination_Navigation_task_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pai::pouw::task_info::_Pagination_Navigation_default_instance_;
    new (ptr) ::pai::pouw::task_info::Pagination_Navigation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pai::pouw::task_info::Pagination_Navigation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_Navigation_task_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pagination_Navigation_task_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_TaskListRequest_task_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pai::pouw::task_info::_TaskListRequest_default_instance_;
    new (ptr) ::pai::pouw::task_info::TaskListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pai::pouw::task_info::TaskListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskListRequest_task_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskListRequest_task_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_TaskListResponse_task_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pai::pouw::task_info::_TaskListResponse_default_instance_;
    new (ptr) ::pai::pouw::task_info::TaskListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pai::pouw::task_info::TaskListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TaskListResponse_task_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TaskListResponse_task_5finfo_2eproto}, {
      &scc_info_Pagination_task_5finfo_2eproto.base,
      &scc_info_TaskRecord_task_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_TaskRecord_task_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pai::pouw::task_info::_TaskRecord_default_instance_;
    new (ptr) ::pai::pouw::task_info::TaskRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pai::pouw::task_info::TaskRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRecord_task_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskRecord_task_5finfo_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_task_5finfo_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_task_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_task_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListRequest, page_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, task_id_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, model_type_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, nodes_no_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, batch_size_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, optimizer_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskRecord, created_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, self_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, first_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, previous_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, next_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination_Navigation, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, page_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, per_page_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, page_count_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, total_count_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::Pagination, navigation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListResponse, code_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListResponse, pagination_),
  PROTOBUF_FIELD_OFFSET(::pai::pouw::task_info::TaskListResponse, tasks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pai::pouw::task_info::TaskListRequest)},
  { 7, -1, sizeof(::pai::pouw::task_info::TaskRecord)},
  { 18, -1, sizeof(::pai::pouw::task_info::Pagination_Navigation)},
  { 28, -1, sizeof(::pai::pouw::task_info::Pagination)},
  { 38, -1, sizeof(::pai::pouw::task_info::TaskListResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pai::pouw::task_info::_TaskListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pai::pouw::task_info::_TaskRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pai::pouw::task_info::_Pagination_Navigation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pai::pouw::task_info::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pai::pouw::task_info::_TaskListResponse_default_instance_),
};

const char descriptor_table_protodef_task_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017task_info.proto\022\022pai.pouw.task_info\032\037g"
  "oogle/protobuf/timestamp.proto\"1\n\017TaskLi"
  "stRequest\022\014\n\004page\030\001 \001(\r\022\020\n\010per_page\030\002 \001("
  "\r\"\227\001\n\nTaskRecord\022\017\n\007task_id\030\001 \001(\t\022\022\n\nmod"
  "el_type\030\002 \001(\t\022\020\n\010nodes_no\030\003 \001(\004\022\022\n\nbatch"
  "_size\030\004 \001(\r\022\021\n\toptimizer\030\005 \001(\t\022+\n\007create"
  "d\030\006 \001(\0132\032.google.protobuf.Timestamp\"\355\001\n\n"
  "Pagination\022\014\n\004page\030\001 \001(\r\022\020\n\010per_page\030\002 \001"
  "(\r\022\022\n\npage_count\030\003 \001(\r\022\023\n\013total_count\030\004 "
  "\001(\r\022=\n\nnavigation\030\005 \001(\0132).pai.pouw.task_"
  "info.Pagination.Navigation\032W\n\nNavigation"
  "\022\014\n\004self\030\001 \001(\t\022\r\n\005first\030\002 \001(\t\022\020\n\010previou"
  "s\030\003 \001(\t\022\014\n\004next\030\004 \001(\t\022\014\n\004last\030\005 \001(\t\"\247\001\n\020"
  "TaskListResponse\0220\n\004code\030\001 \001(\0162\".pai.pou"
  "w.task_info.HTTPReturnCode\0222\n\npagination"
  "\030\002 \001(\0132\036.pai.pouw.task_info.Pagination\022-"
  "\n\005tasks\030\003 \003(\0132\036.pai.pouw.task_info.TaskR"
  "ecord*\\\n\016HTTPReturnCode\022\021\n\rGENERAL_ERROR"
  "\020\000\022\007\n\002OK\020\310\001\022\020\n\013BAD_REQUEST\020\220\003\022\016\n\tNOT_FOU"
  "ND\020\224\003\022\014\n\007INVALID\020\246\0032h\n\010TaskInfo\022\\\n\017GetWa"
  "itingTasks\022#.pai.pouw.task_info.TaskList"
  "Request\032$.pai.pouw.task_info.TaskListRes"
  "ponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_task_5finfo_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_task_5finfo_2eproto_sccs[5] = {
  &scc_info_Pagination_task_5finfo_2eproto.base,
  &scc_info_Pagination_Navigation_task_5finfo_2eproto.base,
  &scc_info_TaskListRequest_task_5finfo_2eproto.base,
  &scc_info_TaskListResponse_task_5finfo_2eproto.base,
  &scc_info_TaskRecord_task_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5finfo_2eproto = {
  false, false, descriptor_table_protodef_task_5finfo_2eproto, "task_info.proto", 893,
  &descriptor_table_task_5finfo_2eproto_once, descriptor_table_task_5finfo_2eproto_sccs, descriptor_table_task_5finfo_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_task_5finfo_2eproto::offsets,
  file_level_metadata_task_5finfo_2eproto, 5, file_level_enum_descriptors_task_5finfo_2eproto, file_level_service_descriptors_task_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_task_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_task_5finfo_2eproto)), true);
namespace pai {
namespace pouw {
namespace task_info {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HTTPReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_5finfo_2eproto);
  return file_level_enum_descriptors_task_5finfo_2eproto[0];
}
bool HTTPReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 400:
    case 404:
    case 422:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TaskListRequest::InitAsDefaultInstance() {
}
class TaskListRequest::_Internal {
 public:
};

TaskListRequest::TaskListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pai.pouw.task_info.TaskListRequest)
}
TaskListRequest::TaskListRequest(const TaskListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:pai.pouw.task_info.TaskListRequest)
}

void TaskListRequest::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

TaskListRequest::~TaskListRequest() {
  // @@protoc_insertion_point(destructor:pai.pouw.task_info.TaskListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskListRequest::ArenaDtor(void* object) {
  TaskListRequest* _this = reinterpret_cast< TaskListRequest* >(object);
  (void)_this;
}
void TaskListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskListRequest& TaskListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskListRequest_task_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TaskListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pai.pouw.task_info.TaskListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pai.pouw.task_info.TaskListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pai.pouw.task_info.TaskListRequest)
  return target;
}

size_t TaskListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pai.pouw.task_info.TaskListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pai.pouw.task_info.TaskListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pai.pouw.task_info.TaskListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pai.pouw.task_info.TaskListRequest)
    MergeFrom(*source);
  }
}

void TaskListRequest::MergeFrom(const TaskListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pai.pouw.task_info.TaskListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void TaskListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pai.pouw.task_info.TaskListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskListRequest::CopyFrom(const TaskListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pai.pouw.task_info.TaskListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskListRequest::IsInitialized() const {
  return true;
}

void TaskListRequest::InternalSwap(TaskListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskListRequest, per_page_)
      + sizeof(TaskListRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(TaskListRequest, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskRecord::InitAsDefaultInstance() {
  ::pai::pouw::task_info::_TaskRecord_default_instance_._instance.get_mutable()->created_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TaskRecord::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const TaskRecord* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TaskRecord::_Internal::created(const TaskRecord* msg) {
  return *msg->created_;
}
void TaskRecord::clear_created() {
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
TaskRecord::TaskRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pai.pouw.task_info.TaskRecord)
}
TaskRecord::TaskRecord(const TaskRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task_id(),
      GetArena());
  }
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type().empty()) {
    model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_type(),
      GetArena());
  }
  optimizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optimizer().empty()) {
    optimizer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optimizer(),
      GetArena());
  }
  if (from._internal_has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  ::memcpy(&nodes_no_, &from.nodes_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&nodes_no_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:pai.pouw.task_info.TaskRecord)
}

void TaskRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskRecord_task_5finfo_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optimizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&created_)) + sizeof(batch_size_));
}

TaskRecord::~TaskRecord() {
  // @@protoc_insertion_point(destructor:pai.pouw.task_info.TaskRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_;
}

void TaskRecord::ArenaDtor(void* object) {
  TaskRecord* _this = reinterpret_cast< TaskRecord* >(object);
  (void)_this;
}
void TaskRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskRecord& TaskRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskRecord_task_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TaskRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pai.pouw.task_info.TaskRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optimizer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  ::memset(&nodes_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&nodes_no_)) + sizeof(batch_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.TaskRecord.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.TaskRecord.model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nodes_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nodes_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optimizer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_optimizer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.TaskRecord.optimizer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pai.pouw.task_info.TaskRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.TaskRecord.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.TaskRecord.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // uint64 nodes_no = 3;
  if (this->nodes_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nodes_no(), target);
  }

  // uint32 batch_size = 4;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // string optimizer = 5;
  if (this->optimizer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optimizer().data(), static_cast<int>(this->_internal_optimizer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.TaskRecord.optimizer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_optimizer(), target);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pai.pouw.task_info.TaskRecord)
  return target;
}

size_t TaskRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pai.pouw.task_info.TaskRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // string optimizer = 5;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optimizer());
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // uint64 nodes_no = 3;
  if (this->nodes_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nodes_no());
  }

  // uint32 batch_size = 4;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pai.pouw.task_info.TaskRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pai.pouw.task_info.TaskRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pai.pouw.task_info.TaskRecord)
    MergeFrom(*source);
  }
}

void TaskRecord::MergeFrom(const TaskRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pai.pouw.task_info.TaskRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.model_type().size() > 0) {
    _internal_set_model_type(from._internal_model_type());
  }
  if (from.optimizer().size() > 0) {
    _internal_set_optimizer(from._internal_optimizer());
  }
  if (from.has_created()) {
    _internal_mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from.nodes_no() != 0) {
    _internal_set_nodes_no(from._internal_nodes_no());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void TaskRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pai.pouw.task_info.TaskRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRecord::CopyFrom(const TaskRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pai.pouw.task_info.TaskRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRecord::IsInitialized() const {
  return true;
}

void TaskRecord::InternalSwap(TaskRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.Swap(&other->model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optimizer_.Swap(&other->optimizer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskRecord, batch_size_)
      + sizeof(TaskRecord::batch_size_)
      - PROTOBUF_FIELD_OFFSET(TaskRecord, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pagination_Navigation::InitAsDefaultInstance() {
}
class Pagination_Navigation::_Internal {
 public:
};

Pagination_Navigation::Pagination_Navigation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pai.pouw.task_info.Pagination.Navigation)
}
Pagination_Navigation::Pagination_Navigation(const Pagination_Navigation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  self_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_self().empty()) {
    self_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_self(),
      GetArena());
  }
  first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first().empty()) {
    first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_first(),
      GetArena());
  }
  previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous().empty()) {
    previous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous(),
      GetArena());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next().empty()) {
    next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next(),
      GetArena());
  }
  last_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last().empty()) {
    last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pai.pouw.task_info.Pagination.Navigation)
}

void Pagination_Navigation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pagination_Navigation_task_5finfo_2eproto.base);
  self_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pagination_Navigation::~Pagination_Navigation() {
  // @@protoc_insertion_point(destructor:pai.pouw.task_info.Pagination.Navigation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pagination_Navigation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  self_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pagination_Navigation::ArenaDtor(void* object) {
  Pagination_Navigation* _this = reinterpret_cast< Pagination_Navigation* >(object);
  (void)_this;
}
void Pagination_Navigation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination_Navigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination_Navigation& Pagination_Navigation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_Navigation_task_5finfo_2eproto.base);
  return *internal_default_instance();
}


void Pagination_Navigation::Clear() {
// @@protoc_insertion_point(message_clear_start:pai.pouw.task_info.Pagination.Navigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  self_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination_Navigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_self();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.Pagination.Navigation.self"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.Pagination.Navigation.first"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_previous();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.Pagination.Navigation.previous"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.Pagination.Navigation.next"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pai.pouw.task_info.Pagination.Navigation.last"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination_Navigation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pai.pouw.task_info.Pagination.Navigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string self = 1;
  if (this->self().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_self().data(), static_cast<int>(this->_internal_self().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.Pagination.Navigation.self");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_self(), target);
  }

  // string first = 2;
  if (this->first().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first().data(), static_cast<int>(this->_internal_first().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.Pagination.Navigation.first");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first(), target);
  }

  // string previous = 3;
  if (this->previous().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous().data(), static_cast<int>(this->_internal_previous().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.Pagination.Navigation.previous");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_previous(), target);
  }

  // string next = 4;
  if (this->next().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next().data(), static_cast<int>(this->_internal_next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.Pagination.Navigation.next");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_next(), target);
  }

  // string last = 5;
  if (this->last().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pai.pouw.task_info.Pagination.Navigation.last");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pai.pouw.task_info.Pagination.Navigation)
  return target;
}

size_t Pagination_Navigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pai.pouw.task_info.Pagination.Navigation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string self = 1;
  if (this->self().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self());
  }

  // string first = 2;
  if (this->first().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first());
  }

  // string previous = 3;
  if (this->previous().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous());
  }

  // string next = 4;
  if (this->next().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next());
  }

  // string last = 5;
  if (this->last().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination_Navigation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pai.pouw.task_info.Pagination.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination_Navigation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination_Navigation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pai.pouw.task_info.Pagination.Navigation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pai.pouw.task_info.Pagination.Navigation)
    MergeFrom(*source);
  }
}

void Pagination_Navigation::MergeFrom(const Pagination_Navigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pai.pouw.task_info.Pagination.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.self().size() > 0) {
    _internal_set_self(from._internal_self());
  }
  if (from.first().size() > 0) {
    _internal_set_first(from._internal_first());
  }
  if (from.previous().size() > 0) {
    _internal_set_previous(from._internal_previous());
  }
  if (from.next().size() > 0) {
    _internal_set_next(from._internal_next());
  }
  if (from.last().size() > 0) {
    _internal_set_last(from._internal_last());
  }
}

void Pagination_Navigation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pai.pouw.task_info.Pagination.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination_Navigation::CopyFrom(const Pagination_Navigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pai.pouw.task_info.Pagination.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination_Navigation::IsInitialized() const {
  return true;
}

void Pagination_Navigation::InternalSwap(Pagination_Navigation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  self_.Swap(&other->self_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_.Swap(&other->first_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_.Swap(&other->previous_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_.Swap(&other->last_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination_Navigation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pagination::InitAsDefaultInstance() {
  ::pai::pouw::task_info::_Pagination_default_instance_._instance.get_mutable()->navigation_ = const_cast< ::pai::pouw::task_info::Pagination_Navigation*>(
      ::pai::pouw::task_info::Pagination_Navigation::internal_default_instance());
}
class Pagination::_Internal {
 public:
  static const ::pai::pouw::task_info::Pagination_Navigation& navigation(const Pagination* msg);
};

const ::pai::pouw::task_info::Pagination_Navigation&
Pagination::_Internal::navigation(const Pagination* msg) {
  return *msg->navigation_;
}
Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pai.pouw.task_info.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navigation()) {
    navigation_ = new ::pai::pouw::task_info::Pagination_Navigation(*from.navigation_);
  } else {
    navigation_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&page_)) + sizeof(total_count_));
  // @@protoc_insertion_point(copy_constructor:pai.pouw.task_info.Pagination)
}

void Pagination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pagination_task_5finfo_2eproto.base);
  ::memset(&navigation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&navigation_)) + sizeof(total_count_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:pai.pouw.task_info.Pagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete navigation_;
}

void Pagination::ArenaDtor(void* object) {
  Pagination* _this = reinterpret_cast< Pagination* >(object);
  (void)_this;
}
void Pagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_task_5finfo_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:pai.pouw.task_info.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && navigation_ != nullptr) {
    delete navigation_;
  }
  navigation_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&page_)) + sizeof(total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pai.pouw.task_info.Pagination.Navigation navigation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pai.pouw.task_info.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  // uint32 page_count = 3;
  if (this->page_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_count(), target);
  }

  // uint32 total_count = 4;
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_count(), target);
  }

  // .pai.pouw.task_info.Pagination.Navigation navigation = 5;
  if (this->has_navigation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::navigation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pai.pouw.task_info.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pai.pouw.task_info.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pai.pouw.task_info.Pagination.Navigation navigation = 5;
  if (this->has_navigation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *navigation_);
  }

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  // uint32 page_count = 3;
  if (this->page_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_count());
  }

  // uint32 total_count = 4;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pai.pouw.task_info.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pai.pouw.task_info.Pagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pai.pouw.task_info.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pai.pouw.task_info.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_navigation()) {
    _internal_mutable_navigation()->::pai::pouw::task_info::Pagination_Navigation::MergeFrom(from._internal_navigation());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from.page_count() != 0) {
    _internal_set_page_count(from._internal_page_count());
  }
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
}

void Pagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pai.pouw.task_info.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pai.pouw.task_info.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, total_count_)
      + sizeof(Pagination::total_count_)
      - PROTOBUF_FIELD_OFFSET(Pagination, navigation_)>(
          reinterpret_cast<char*>(&navigation_),
          reinterpret_cast<char*>(&other->navigation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskListResponse::InitAsDefaultInstance() {
  ::pai::pouw::task_info::_TaskListResponse_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::pai::pouw::task_info::Pagination*>(
      ::pai::pouw::task_info::Pagination::internal_default_instance());
}
class TaskListResponse::_Internal {
 public:
  static const ::pai::pouw::task_info::Pagination& pagination(const TaskListResponse* msg);
};

const ::pai::pouw::task_info::Pagination&
TaskListResponse::_Internal::pagination(const TaskListResponse* msg) {
  return *msg->pagination_;
}
TaskListResponse::TaskListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pai.pouw.task_info.TaskListResponse)
}
TaskListResponse::TaskListResponse(const TaskListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::pai::pouw::task_info::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:pai.pouw.task_info.TaskListResponse)
}

void TaskListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskListResponse_task_5finfo_2eproto.base);
  ::memset(&pagination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pagination_)) + sizeof(code_));
}

TaskListResponse::~TaskListResponse() {
  // @@protoc_insertion_point(destructor:pai.pouw.task_info.TaskListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void TaskListResponse::ArenaDtor(void* object) {
  TaskListResponse* _this = reinterpret_cast< TaskListResponse* >(object);
  (void)_this;
}
void TaskListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskListResponse& TaskListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskListResponse_task_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TaskListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pai.pouw.task_info.TaskListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pai.pouw.task_info.HTTPReturnCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::pai::pouw::task_info::HTTPReturnCode>(val));
        } else goto handle_unusual;
        continue;
      // .pai.pouw.task_info.Pagination pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pai.pouw.task_info.TaskRecord tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pai.pouw.task_info.TaskListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pai.pouw.task_info.HTTPReturnCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .pai.pouw.task_info.Pagination pagination = 2;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  // repeated .pai.pouw.task_info.TaskRecord tasks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pai.pouw.task_info.TaskListResponse)
  return target;
}

size_t TaskListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pai.pouw.task_info.TaskListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pai.pouw.task_info.TaskRecord tasks = 3;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pai.pouw.task_info.Pagination pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  // .pai.pouw.task_info.HTTPReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pai.pouw.task_info.TaskListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pai.pouw.task_info.TaskListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pai.pouw.task_info.TaskListResponse)
    MergeFrom(*source);
  }
}

void TaskListResponse::MergeFrom(const TaskListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pai.pouw.task_info.TaskListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::pai::pouw::task_info::Pagination::MergeFrom(from._internal_pagination());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void TaskListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pai.pouw.task_info.TaskListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskListResponse::CopyFrom(const TaskListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pai.pouw.task_info.TaskListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskListResponse::IsInitialized() const {
  return true;
}

void TaskListResponse::InternalSwap(TaskListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskListResponse, code_)
      + sizeof(TaskListResponse::code_)
      - PROTOBUF_FIELD_OFFSET(TaskListResponse, pagination_)>(
          reinterpret_cast<char*>(&pagination_),
          reinterpret_cast<char*>(&other->pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace task_info
}  // namespace pouw
}  // namespace pai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pai::pouw::task_info::TaskListRequest* Arena::CreateMaybeMessage< ::pai::pouw::task_info::TaskListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pai::pouw::task_info::TaskListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pai::pouw::task_info::TaskRecord* Arena::CreateMaybeMessage< ::pai::pouw::task_info::TaskRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pai::pouw::task_info::TaskRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::pai::pouw::task_info::Pagination_Navigation* Arena::CreateMaybeMessage< ::pai::pouw::task_info::Pagination_Navigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pai::pouw::task_info::Pagination_Navigation >(arena);
}
template<> PROTOBUF_NOINLINE ::pai::pouw::task_info::Pagination* Arena::CreateMaybeMessage< ::pai::pouw::task_info::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pai::pouw::task_info::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::pai::pouw::task_info::TaskListResponse* Arena::CreateMaybeMessage< ::pai::pouw::task_info::TaskListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pai::pouw::task_info::TaskListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
