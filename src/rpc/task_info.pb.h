// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5finfo_2eproto;
namespace pai {
namespace pouw {
namespace task_info {
class Pagination;
class PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class Pagination_Navigation;
class Pagination_NavigationDefaultTypeInternal;
extern Pagination_NavigationDefaultTypeInternal _Pagination_Navigation_default_instance_;
class TaskListRequest;
class TaskListRequestDefaultTypeInternal;
extern TaskListRequestDefaultTypeInternal _TaskListRequest_default_instance_;
class TaskListResponse;
class TaskListResponseDefaultTypeInternal;
extern TaskListResponseDefaultTypeInternal _TaskListResponse_default_instance_;
class TaskRecord;
class TaskRecordDefaultTypeInternal;
extern TaskRecordDefaultTypeInternal _TaskRecord_default_instance_;
}  // namespace task_info
}  // namespace pouw
}  // namespace pai
PROTOBUF_NAMESPACE_OPEN
template<> ::pai::pouw::task_info::Pagination* Arena::CreateMaybeMessage<::pai::pouw::task_info::Pagination>(Arena*);
template<> ::pai::pouw::task_info::Pagination_Navigation* Arena::CreateMaybeMessage<::pai::pouw::task_info::Pagination_Navigation>(Arena*);
template<> ::pai::pouw::task_info::TaskListRequest* Arena::CreateMaybeMessage<::pai::pouw::task_info::TaskListRequest>(Arena*);
template<> ::pai::pouw::task_info::TaskListResponse* Arena::CreateMaybeMessage<::pai::pouw::task_info::TaskListResponse>(Arena*);
template<> ::pai::pouw::task_info::TaskRecord* Arena::CreateMaybeMessage<::pai::pouw::task_info::TaskRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pai {
namespace pouw {
namespace task_info {

enum HTTPReturnCode : int {
  GENERAL_ERROR = 0,
  OK = 200,
  BAD_REQUEST = 400,
  NOT_FOUND = 404,
  INVALID = 422,
  HTTPReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HTTPReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HTTPReturnCode_IsValid(int value);
constexpr HTTPReturnCode HTTPReturnCode_MIN = GENERAL_ERROR;
constexpr HTTPReturnCode HTTPReturnCode_MAX = INVALID;
constexpr int HTTPReturnCode_ARRAYSIZE = HTTPReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HTTPReturnCode_descriptor();
template<typename T>
inline const std::string& HTTPReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HTTPReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HTTPReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HTTPReturnCode_descriptor(), enum_t_value);
}
inline bool HTTPReturnCode_Parse(
    const std::string& name, HTTPReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HTTPReturnCode>(
    HTTPReturnCode_descriptor(), name, value);
}
// ===================================================================

class TaskListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pai.pouw.task_info.TaskListRequest) */ {
 public:
  inline TaskListRequest() : TaskListRequest(nullptr) {};
  virtual ~TaskListRequest();

  TaskListRequest(const TaskListRequest& from);
  TaskListRequest(TaskListRequest&& from) noexcept
    : TaskListRequest() {
    *this = ::std::move(from);
  }

  inline TaskListRequest& operator=(const TaskListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskListRequest& operator=(TaskListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskListRequest* internal_default_instance() {
    return reinterpret_cast<const TaskListRequest*>(
               &_TaskListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskListRequest& a, TaskListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskListRequest* New() const final {
    return CreateMaybeMessage<TaskListRequest>(nullptr);
  }

  TaskListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskListRequest& from);
  void MergeFrom(const TaskListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pai.pouw.task_info.TaskListRequest";
  }
  protected:
  explicit TaskListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_5finfo_2eproto);
    return ::descriptor_table_task_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kPerPageFieldNumber = 2,
  };
  // uint32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pai.pouw.task_info.TaskListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TaskRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pai.pouw.task_info.TaskRecord) */ {
 public:
  inline TaskRecord() : TaskRecord(nullptr) {};
  virtual ~TaskRecord();

  TaskRecord(const TaskRecord& from);
  TaskRecord(TaskRecord&& from) noexcept
    : TaskRecord() {
    *this = ::std::move(from);
  }

  inline TaskRecord& operator=(const TaskRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRecord& operator=(TaskRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRecord* internal_default_instance() {
    return reinterpret_cast<const TaskRecord*>(
               &_TaskRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskRecord& a, TaskRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRecord* New() const final {
    return CreateMaybeMessage<TaskRecord>(nullptr);
  }

  TaskRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskRecord& from);
  void MergeFrom(const TaskRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pai.pouw.task_info.TaskRecord";
  }
  protected:
  explicit TaskRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_5finfo_2eproto);
    return ::descriptor_table_task_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kModelTypeFieldNumber = 2,
    kOptimizerFieldNumber = 5,
    kCreatedFieldNumber = 6,
    kNodesNoFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task_id(
      std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string model_type = 2;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_type(
      std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // string optimizer = 5;
  void clear_optimizer();
  const std::string& optimizer() const;
  void set_optimizer(const std::string& value);
  void set_optimizer(std::string&& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  std::string* mutable_optimizer();
  std::string* release_optimizer();
  void set_allocated_optimizer(std::string* optimizer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_optimizer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_optimizer(
      std::string* optimizer);
  private:
  const std::string& _internal_optimizer() const;
  void _internal_set_optimizer(const std::string& value);
  std::string* _internal_mutable_optimizer();
  public:

  // .google.protobuf.Timestamp created = 6;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      PROTOBUF_NAMESPACE_ID::Timestamp* created);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // uint64 nodes_no = 3;
  void clear_nodes_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 nodes_no() const;
  void set_nodes_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nodes_no() const;
  void _internal_set_nodes_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 batch_size = 4;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pai.pouw.task_info.TaskRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimizer_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nodes_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Pagination_Navigation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pai.pouw.task_info.Pagination.Navigation) */ {
 public:
  inline Pagination_Navigation() : Pagination_Navigation(nullptr) {};
  virtual ~Pagination_Navigation();

  Pagination_Navigation(const Pagination_Navigation& from);
  Pagination_Navigation(Pagination_Navigation&& from) noexcept
    : Pagination_Navigation() {
    *this = ::std::move(from);
  }

  inline Pagination_Navigation& operator=(const Pagination_Navigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination_Navigation& operator=(Pagination_Navigation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pagination_Navigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pagination_Navigation* internal_default_instance() {
    return reinterpret_cast<const Pagination_Navigation*>(
               &_Pagination_Navigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pagination_Navigation& a, Pagination_Navigation& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination_Navigation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination_Navigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pagination_Navigation* New() const final {
    return CreateMaybeMessage<Pagination_Navigation>(nullptr);
  }

  Pagination_Navigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pagination_Navigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pagination_Navigation& from);
  void MergeFrom(const Pagination_Navigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination_Navigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pai.pouw.task_info.Pagination.Navigation";
  }
  protected:
  explicit Pagination_Navigation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_5finfo_2eproto);
    return ::descriptor_table_task_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kFirstFieldNumber = 2,
    kPreviousFieldNumber = 3,
    kNextFieldNumber = 4,
    kLastFieldNumber = 5,
  };
  // string self = 1;
  void clear_self();
  const std::string& self() const;
  void set_self(const std::string& value);
  void set_self(std::string&& value);
  void set_self(const char* value);
  void set_self(const char* value, size_t size);
  std::string* mutable_self();
  std::string* release_self();
  void set_allocated_self(std::string* self);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_self();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_self(
      std::string* self);
  private:
  const std::string& _internal_self() const;
  void _internal_set_self(const std::string& value);
  std::string* _internal_mutable_self();
  public:

  // string first = 2;
  void clear_first();
  const std::string& first() const;
  void set_first(const std::string& value);
  void set_first(std::string&& value);
  void set_first(const char* value);
  void set_first(const char* value, size_t size);
  std::string* mutable_first();
  std::string* release_first();
  void set_allocated_first(std::string* first);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_first();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first(
      std::string* first);
  private:
  const std::string& _internal_first() const;
  void _internal_set_first(const std::string& value);
  std::string* _internal_mutable_first();
  public:

  // string previous = 3;
  void clear_previous();
  const std::string& previous() const;
  void set_previous(const std::string& value);
  void set_previous(std::string&& value);
  void set_previous(const char* value);
  void set_previous(const char* value, size_t size);
  std::string* mutable_previous();
  std::string* release_previous();
  void set_allocated_previous(std::string* previous);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_previous();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_previous(
      std::string* previous);
  private:
  const std::string& _internal_previous() const;
  void _internal_set_previous(const std::string& value);
  std::string* _internal_mutable_previous();
  public:

  // string next = 4;
  void clear_next();
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const char* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next(
      std::string* next);
  private:
  const std::string& _internal_next() const;
  void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // string last = 5;
  void clear_last();
  const std::string& last() const;
  void set_last(const std::string& value);
  void set_last(std::string&& value);
  void set_last(const char* value);
  void set_last(const char* value, size_t size);
  std::string* mutable_last();
  std::string* release_last();
  void set_allocated_last(std::string* last);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last(
      std::string* last);
  private:
  const std::string& _internal_last() const;
  void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // @@protoc_insertion_point(class_scope:pai.pouw.task_info.Pagination.Navigation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Pagination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pai.pouw.task_info.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {};
  virtual ~Pagination();

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pagination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pagination* New() const final {
    return CreateMaybeMessage<Pagination>(nullptr);
  }

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pagination& from);
  void MergeFrom(const Pagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pai.pouw.task_info.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_5finfo_2eproto);
    return ::descriptor_table_task_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pagination_Navigation Navigation;

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationFieldNumber = 5,
    kPageFieldNumber = 1,
    kPerPageFieldNumber = 2,
    kPageCountFieldNumber = 3,
    kTotalCountFieldNumber = 4,
  };
  // .pai.pouw.task_info.Pagination.Navigation navigation = 5;
  bool has_navigation() const;
  private:
  bool _internal_has_navigation() const;
  public:
  void clear_navigation();
  const ::pai::pouw::task_info::Pagination_Navigation& navigation() const;
  ::pai::pouw::task_info::Pagination_Navigation* release_navigation();
  ::pai::pouw::task_info::Pagination_Navigation* mutable_navigation();
  void set_allocated_navigation(::pai::pouw::task_info::Pagination_Navigation* navigation);
  private:
  const ::pai::pouw::task_info::Pagination_Navigation& _internal_navigation() const;
  ::pai::pouw::task_info::Pagination_Navigation* _internal_mutable_navigation();
  public:
  void unsafe_arena_set_allocated_navigation(
      ::pai::pouw::task_info::Pagination_Navigation* navigation);
  ::pai::pouw::task_info::Pagination_Navigation* unsafe_arena_release_navigation();

  // uint32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page_count = 3;
  void clear_page_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_count() const;
  void set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_count() const;
  void _internal_set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_count = 4;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pai.pouw.task_info.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pai::pouw::task_info::Pagination_Navigation* navigation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TaskListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pai.pouw.task_info.TaskListResponse) */ {
 public:
  inline TaskListResponse() : TaskListResponse(nullptr) {};
  virtual ~TaskListResponse();

  TaskListResponse(const TaskListResponse& from);
  TaskListResponse(TaskListResponse&& from) noexcept
    : TaskListResponse() {
    *this = ::std::move(from);
  }

  inline TaskListResponse& operator=(const TaskListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskListResponse& operator=(TaskListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskListResponse* internal_default_instance() {
    return reinterpret_cast<const TaskListResponse*>(
               &_TaskListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskListResponse& a, TaskListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskListResponse* New() const final {
    return CreateMaybeMessage<TaskListResponse>(nullptr);
  }

  TaskListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskListResponse& from);
  void MergeFrom(const TaskListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pai.pouw.task_info.TaskListResponse";
  }
  protected:
  explicit TaskListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_5finfo_2eproto);
    return ::descriptor_table_task_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 3,
    kPaginationFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .pai.pouw.task_info.TaskRecord tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::pai::pouw::task_info::TaskRecord* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pai::pouw::task_info::TaskRecord >*
      mutable_tasks();
  private:
  const ::pai::pouw::task_info::TaskRecord& _internal_tasks(int index) const;
  ::pai::pouw::task_info::TaskRecord* _internal_add_tasks();
  public:
  const ::pai::pouw::task_info::TaskRecord& tasks(int index) const;
  ::pai::pouw::task_info::TaskRecord* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pai::pouw::task_info::TaskRecord >&
      tasks() const;

  // .pai.pouw.task_info.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::pai::pouw::task_info::Pagination& pagination() const;
  ::pai::pouw::task_info::Pagination* release_pagination();
  ::pai::pouw::task_info::Pagination* mutable_pagination();
  void set_allocated_pagination(::pai::pouw::task_info::Pagination* pagination);
  private:
  const ::pai::pouw::task_info::Pagination& _internal_pagination() const;
  ::pai::pouw::task_info::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::pai::pouw::task_info::Pagination* pagination);
  ::pai::pouw::task_info::Pagination* unsafe_arena_release_pagination();

  // .pai.pouw.task_info.HTTPReturnCode code = 1;
  void clear_code();
  ::pai::pouw::task_info::HTTPReturnCode code() const;
  void set_code(::pai::pouw::task_info::HTTPReturnCode value);
  private:
  ::pai::pouw::task_info::HTTPReturnCode _internal_code() const;
  void _internal_set_code(::pai::pouw::task_info::HTTPReturnCode value);
  public:

  // @@protoc_insertion_point(class_scope:pai.pouw.task_info.TaskListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pai::pouw::task_info::TaskRecord > tasks_;
  ::pai::pouw::task_info::Pagination* pagination_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskListRequest

// uint32 page = 1;
inline void TaskListRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskListRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskListRequest::page() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskListRequest.page)
  return _internal_page();
}
inline void TaskListRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void TaskListRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskListRequest.page)
}

// uint32 per_page = 2;
inline void TaskListRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskListRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskListRequest::per_page() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskListRequest.per_page)
  return _internal_per_page();
}
inline void TaskListRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void TaskListRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskListRequest.per_page)
}

// -------------------------------------------------------------------

// TaskRecord

// string task_id = 1;
inline void TaskRecord::clear_task_id() {
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TaskRecord::task_id() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.task_id)
  return _internal_task_id();
}
inline void TaskRecord::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskRecord.task_id)
}
inline std::string* TaskRecord::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskRecord.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& TaskRecord::_internal_task_id() const {
  return task_id_.Get();
}
inline void TaskRecord::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TaskRecord::set_task_id(std::string&& value) {
  
  task_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.TaskRecord.task_id)
}
inline void TaskRecord::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.TaskRecord.task_id)
}
inline void TaskRecord::set_task_id(const char* value,
    size_t size) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.TaskRecord.task_id)
}
inline std::string* TaskRecord::_internal_mutable_task_id() {
  
  return task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TaskRecord::release_task_id() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.TaskRecord.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRecord::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.TaskRecord.task_id)
}
inline std::string* TaskRecord::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.TaskRecord.task_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return task_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TaskRecord::unsafe_arena_set_allocated_task_id(
    std::string* task_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.TaskRecord.task_id)
}

// string model_type = 2;
inline void TaskRecord::clear_model_type() {
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TaskRecord::model_type() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.model_type)
  return _internal_model_type();
}
inline void TaskRecord::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskRecord.model_type)
}
inline std::string* TaskRecord::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskRecord.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& TaskRecord::_internal_model_type() const {
  return model_type_.Get();
}
inline void TaskRecord::_internal_set_model_type(const std::string& value) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TaskRecord::set_model_type(std::string&& value) {
  
  model_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.TaskRecord.model_type)
}
inline void TaskRecord::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.TaskRecord.model_type)
}
inline void TaskRecord::set_model_type(const char* value,
    size_t size) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.TaskRecord.model_type)
}
inline std::string* TaskRecord::_internal_mutable_model_type() {
  
  return model_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TaskRecord::release_model_type() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.TaskRecord.model_type)
  return model_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRecord::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.TaskRecord.model_type)
}
inline std::string* TaskRecord::unsafe_arena_release_model_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.TaskRecord.model_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TaskRecord::unsafe_arena_set_allocated_model_type(
    std::string* model_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.TaskRecord.model_type)
}

// uint64 nodes_no = 3;
inline void TaskRecord::clear_nodes_no() {
  nodes_no_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskRecord::_internal_nodes_no() const {
  return nodes_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskRecord::nodes_no() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.nodes_no)
  return _internal_nodes_no();
}
inline void TaskRecord::_internal_set_nodes_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nodes_no_ = value;
}
inline void TaskRecord::set_nodes_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nodes_no(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskRecord.nodes_no)
}

// uint32 batch_size = 4;
inline void TaskRecord::clear_batch_size() {
  batch_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRecord::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRecord::batch_size() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.batch_size)
  return _internal_batch_size();
}
inline void TaskRecord::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_size_ = value;
}
inline void TaskRecord::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskRecord.batch_size)
}

// string optimizer = 5;
inline void TaskRecord::clear_optimizer() {
  optimizer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TaskRecord::optimizer() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.optimizer)
  return _internal_optimizer();
}
inline void TaskRecord::set_optimizer(const std::string& value) {
  _internal_set_optimizer(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskRecord.optimizer)
}
inline std::string* TaskRecord::mutable_optimizer() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskRecord.optimizer)
  return _internal_mutable_optimizer();
}
inline const std::string& TaskRecord::_internal_optimizer() const {
  return optimizer_.Get();
}
inline void TaskRecord::_internal_set_optimizer(const std::string& value) {
  
  optimizer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TaskRecord::set_optimizer(std::string&& value) {
  
  optimizer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.TaskRecord.optimizer)
}
inline void TaskRecord::set_optimizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optimizer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.TaskRecord.optimizer)
}
inline void TaskRecord::set_optimizer(const char* value,
    size_t size) {
  
  optimizer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.TaskRecord.optimizer)
}
inline std::string* TaskRecord::_internal_mutable_optimizer() {
  
  return optimizer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TaskRecord::release_optimizer() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.TaskRecord.optimizer)
  return optimizer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRecord::set_allocated_optimizer(std::string* optimizer) {
  if (optimizer != nullptr) {
    
  } else {
    
  }
  optimizer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimizer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.TaskRecord.optimizer)
}
inline std::string* TaskRecord::unsafe_arena_release_optimizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.TaskRecord.optimizer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return optimizer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TaskRecord::unsafe_arena_set_allocated_optimizer(
    std::string* optimizer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (optimizer != nullptr) {
    
  } else {
    
  }
  optimizer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      optimizer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.TaskRecord.optimizer)
}

// .google.protobuf.Timestamp created = 6;
inline bool TaskRecord::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool TaskRecord::has_created() const {
  return _internal_has_created();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskRecord::_internal_created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskRecord::created() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskRecord.created)
  return _internal_created();
}
inline void TaskRecord::unsafe_arena_set_allocated_created(
    PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.TaskRecord.created)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskRecord::release_created() {
  auto temp = unsafe_arena_release_created();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskRecord::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.TaskRecord.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskRecord::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_ = p;
  }
  return created_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskRecord::mutable_created() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskRecord.created)
  return _internal_mutable_created();
}
inline void TaskRecord::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.TaskRecord.created)
}

// -------------------------------------------------------------------

// Pagination_Navigation

// string self = 1;
inline void Pagination_Navigation::clear_self() {
  self_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pagination_Navigation::self() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.Navigation.self)
  return _internal_self();
}
inline void Pagination_Navigation::set_self(const std::string& value) {
  _internal_set_self(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.Navigation.self)
}
inline std::string* Pagination_Navigation::mutable_self() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.Navigation.self)
  return _internal_mutable_self();
}
inline const std::string& Pagination_Navigation::_internal_self() const {
  return self_.Get();
}
inline void Pagination_Navigation::_internal_set_self(const std::string& value) {
  
  self_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pagination_Navigation::set_self(std::string&& value) {
  
  self_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.Pagination.Navigation.self)
}
inline void Pagination_Navigation::set_self(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  self_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.Pagination.Navigation.self)
}
inline void Pagination_Navigation::set_self(const char* value,
    size_t size) {
  
  self_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.Pagination.Navigation.self)
}
inline std::string* Pagination_Navigation::_internal_mutable_self() {
  
  return self_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pagination_Navigation::release_self() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.Navigation.self)
  return self_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pagination_Navigation::set_allocated_self(std::string* self) {
  if (self != nullptr) {
    
  } else {
    
  }
  self_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), self,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.Navigation.self)
}
inline std::string* Pagination_Navigation::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.Pagination.Navigation.self)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return self_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pagination_Navigation::unsafe_arena_set_allocated_self(
    std::string* self) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (self != nullptr) {
    
  } else {
    
  }
  self_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      self, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.Navigation.self)
}

// string first = 2;
inline void Pagination_Navigation::clear_first() {
  first_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pagination_Navigation::first() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.Navigation.first)
  return _internal_first();
}
inline void Pagination_Navigation::set_first(const std::string& value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.Navigation.first)
}
inline std::string* Pagination_Navigation::mutable_first() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.Navigation.first)
  return _internal_mutable_first();
}
inline const std::string& Pagination_Navigation::_internal_first() const {
  return first_.Get();
}
inline void Pagination_Navigation::_internal_set_first(const std::string& value) {
  
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pagination_Navigation::set_first(std::string&& value) {
  
  first_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.Pagination.Navigation.first)
}
inline void Pagination_Navigation::set_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.Pagination.Navigation.first)
}
inline void Pagination_Navigation::set_first(const char* value,
    size_t size) {
  
  first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.Pagination.Navigation.first)
}
inline std::string* Pagination_Navigation::_internal_mutable_first() {
  
  return first_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pagination_Navigation::release_first() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.Navigation.first)
  return first_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pagination_Navigation::set_allocated_first(std::string* first) {
  if (first != nullptr) {
    
  } else {
    
  }
  first_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.Navigation.first)
}
inline std::string* Pagination_Navigation::unsafe_arena_release_first() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.Pagination.Navigation.first)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return first_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pagination_Navigation::unsafe_arena_set_allocated_first(
    std::string* first) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (first != nullptr) {
    
  } else {
    
  }
  first_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      first, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.Navigation.first)
}

// string previous = 3;
inline void Pagination_Navigation::clear_previous() {
  previous_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pagination_Navigation::previous() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.Navigation.previous)
  return _internal_previous();
}
inline void Pagination_Navigation::set_previous(const std::string& value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.Navigation.previous)
}
inline std::string* Pagination_Navigation::mutable_previous() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.Navigation.previous)
  return _internal_mutable_previous();
}
inline const std::string& Pagination_Navigation::_internal_previous() const {
  return previous_.Get();
}
inline void Pagination_Navigation::_internal_set_previous(const std::string& value) {
  
  previous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pagination_Navigation::set_previous(std::string&& value) {
  
  previous_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.Pagination.Navigation.previous)
}
inline void Pagination_Navigation::set_previous(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.Pagination.Navigation.previous)
}
inline void Pagination_Navigation::set_previous(const char* value,
    size_t size) {
  
  previous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.Pagination.Navigation.previous)
}
inline std::string* Pagination_Navigation::_internal_mutable_previous() {
  
  return previous_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pagination_Navigation::release_previous() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.Navigation.previous)
  return previous_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pagination_Navigation::set_allocated_previous(std::string* previous) {
  if (previous != nullptr) {
    
  } else {
    
  }
  previous_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.Navigation.previous)
}
inline std::string* Pagination_Navigation::unsafe_arena_release_previous() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.Pagination.Navigation.previous)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return previous_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pagination_Navigation::unsafe_arena_set_allocated_previous(
    std::string* previous) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (previous != nullptr) {
    
  } else {
    
  }
  previous_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      previous, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.Navigation.previous)
}

// string next = 4;
inline void Pagination_Navigation::clear_next() {
  next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pagination_Navigation::next() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.Navigation.next)
  return _internal_next();
}
inline void Pagination_Navigation::set_next(const std::string& value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.Navigation.next)
}
inline std::string* Pagination_Navigation::mutable_next() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.Navigation.next)
  return _internal_mutable_next();
}
inline const std::string& Pagination_Navigation::_internal_next() const {
  return next_.Get();
}
inline void Pagination_Navigation::_internal_set_next(const std::string& value) {
  
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pagination_Navigation::set_next(std::string&& value) {
  
  next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.Pagination.Navigation.next)
}
inline void Pagination_Navigation::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.Pagination.Navigation.next)
}
inline void Pagination_Navigation::set_next(const char* value,
    size_t size) {
  
  next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.Pagination.Navigation.next)
}
inline std::string* Pagination_Navigation::_internal_mutable_next() {
  
  return next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pagination_Navigation::release_next() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.Navigation.next)
  return next_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pagination_Navigation::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    
  } else {
    
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.Navigation.next)
}
inline std::string* Pagination_Navigation::unsafe_arena_release_next() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.Pagination.Navigation.next)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return next_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pagination_Navigation::unsafe_arena_set_allocated_next(
    std::string* next) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (next != nullptr) {
    
  } else {
    
  }
  next_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.Navigation.next)
}

// string last = 5;
inline void Pagination_Navigation::clear_last() {
  last_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pagination_Navigation::last() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.Navigation.last)
  return _internal_last();
}
inline void Pagination_Navigation::set_last(const std::string& value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.Navigation.last)
}
inline std::string* Pagination_Navigation::mutable_last() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.Navigation.last)
  return _internal_mutable_last();
}
inline const std::string& Pagination_Navigation::_internal_last() const {
  return last_.Get();
}
inline void Pagination_Navigation::_internal_set_last(const std::string& value) {
  
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pagination_Navigation::set_last(std::string&& value) {
  
  last_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pai.pouw.task_info.Pagination.Navigation.last)
}
inline void Pagination_Navigation::set_last(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pai.pouw.task_info.Pagination.Navigation.last)
}
inline void Pagination_Navigation::set_last(const char* value,
    size_t size) {
  
  last_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pai.pouw.task_info.Pagination.Navigation.last)
}
inline std::string* Pagination_Navigation::_internal_mutable_last() {
  
  return last_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pagination_Navigation::release_last() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.Navigation.last)
  return last_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pagination_Navigation::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    
  } else {
    
  }
  last_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.Navigation.last)
}
inline std::string* Pagination_Navigation::unsafe_arena_release_last() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pai.pouw.task_info.Pagination.Navigation.last)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pagination_Navigation::unsafe_arena_set_allocated_last(
    std::string* last) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last != nullptr) {
    
  } else {
    
  }
  last_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.Navigation.last)
}

// -------------------------------------------------------------------

// Pagination

// uint32 page = 1;
inline void Pagination::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::page() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.page)
  return _internal_page();
}
inline void Pagination::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void Pagination::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.page)
}

// uint32 per_page = 2;
inline void Pagination::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::per_page() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.per_page)
  return _internal_per_page();
}
inline void Pagination::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void Pagination::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.per_page)
}

// uint32 page_count = 3;
inline void Pagination::clear_page_count() {
  page_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_page_count() const {
  return page_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::page_count() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.page_count)
  return _internal_page_count();
}
inline void Pagination::_internal_set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_count_ = value;
}
inline void Pagination::set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_count(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.page_count)
}

// uint32 total_count = 4;
inline void Pagination::clear_total_count() {
  total_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::total_count() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.total_count)
  return _internal_total_count();
}
inline void Pagination::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_count_ = value;
}
inline void Pagination::set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.Pagination.total_count)
}

// .pai.pouw.task_info.Pagination.Navigation navigation = 5;
inline bool Pagination::_internal_has_navigation() const {
  return this != internal_default_instance() && navigation_ != nullptr;
}
inline bool Pagination::has_navigation() const {
  return _internal_has_navigation();
}
inline void Pagination::clear_navigation() {
  if (GetArena() == nullptr && navigation_ != nullptr) {
    delete navigation_;
  }
  navigation_ = nullptr;
}
inline const ::pai::pouw::task_info::Pagination_Navigation& Pagination::_internal_navigation() const {
  const ::pai::pouw::task_info::Pagination_Navigation* p = navigation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pai::pouw::task_info::Pagination_Navigation*>(
      &::pai::pouw::task_info::_Pagination_Navigation_default_instance_);
}
inline const ::pai::pouw::task_info::Pagination_Navigation& Pagination::navigation() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.Pagination.navigation)
  return _internal_navigation();
}
inline void Pagination::unsafe_arena_set_allocated_navigation(
    ::pai::pouw::task_info::Pagination_Navigation* navigation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_);
  }
  navigation_ = navigation;
  if (navigation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.Pagination.navigation)
}
inline ::pai::pouw::task_info::Pagination_Navigation* Pagination::release_navigation() {
  auto temp = unsafe_arena_release_navigation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pai::pouw::task_info::Pagination_Navigation* Pagination::unsafe_arena_release_navigation() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.Pagination.navigation)
  
  ::pai::pouw::task_info::Pagination_Navigation* temp = navigation_;
  navigation_ = nullptr;
  return temp;
}
inline ::pai::pouw::task_info::Pagination_Navigation* Pagination::_internal_mutable_navigation() {
  
  if (navigation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pai::pouw::task_info::Pagination_Navigation>(GetArena());
    navigation_ = p;
  }
  return navigation_;
}
inline ::pai::pouw::task_info::Pagination_Navigation* Pagination::mutable_navigation() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.Pagination.navigation)
  return _internal_mutable_navigation();
}
inline void Pagination::set_allocated_navigation(::pai::pouw::task_info::Pagination_Navigation* navigation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete navigation_;
  }
  if (navigation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(navigation);
    if (message_arena != submessage_arena) {
      navigation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation, submessage_arena);
    }
    
  } else {
    
  }
  navigation_ = navigation;
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.Pagination.navigation)
}

// -------------------------------------------------------------------

// TaskListResponse

// .pai.pouw.task_info.HTTPReturnCode code = 1;
inline void TaskListResponse::clear_code() {
  code_ = 0;
}
inline ::pai::pouw::task_info::HTTPReturnCode TaskListResponse::_internal_code() const {
  return static_cast< ::pai::pouw::task_info::HTTPReturnCode >(code_);
}
inline ::pai::pouw::task_info::HTTPReturnCode TaskListResponse::code() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskListResponse.code)
  return _internal_code();
}
inline void TaskListResponse::_internal_set_code(::pai::pouw::task_info::HTTPReturnCode value) {
  
  code_ = value;
}
inline void TaskListResponse::set_code(::pai::pouw::task_info::HTTPReturnCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pai.pouw.task_info.TaskListResponse.code)
}

// .pai.pouw.task_info.Pagination pagination = 2;
inline bool TaskListResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool TaskListResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline void TaskListResponse::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::pai::pouw::task_info::Pagination& TaskListResponse::_internal_pagination() const {
  const ::pai::pouw::task_info::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pai::pouw::task_info::Pagination*>(
      &::pai::pouw::task_info::_Pagination_default_instance_);
}
inline const ::pai::pouw::task_info::Pagination& TaskListResponse::pagination() const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskListResponse.pagination)
  return _internal_pagination();
}
inline void TaskListResponse::unsafe_arena_set_allocated_pagination(
    ::pai::pouw::task_info::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pai.pouw.task_info.TaskListResponse.pagination)
}
inline ::pai::pouw::task_info::Pagination* TaskListResponse::release_pagination() {
  auto temp = unsafe_arena_release_pagination();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pai::pouw::task_info::Pagination* TaskListResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:pai.pouw.task_info.TaskListResponse.pagination)
  
  ::pai::pouw::task_info::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::pai::pouw::task_info::Pagination* TaskListResponse::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::pai::pouw::task_info::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::pai::pouw::task_info::Pagination* TaskListResponse::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskListResponse.pagination)
  return _internal_mutable_pagination();
}
inline void TaskListResponse::set_allocated_pagination(::pai::pouw::task_info::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:pai.pouw.task_info.TaskListResponse.pagination)
}

// repeated .pai.pouw.task_info.TaskRecord tasks = 3;
inline int TaskListResponse::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskListResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskListResponse::clear_tasks() {
  tasks_.Clear();
}
inline ::pai::pouw::task_info::TaskRecord* TaskListResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pai.pouw.task_info.TaskListResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pai::pouw::task_info::TaskRecord >*
TaskListResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pai.pouw.task_info.TaskListResponse.tasks)
  return &tasks_;
}
inline const ::pai::pouw::task_info::TaskRecord& TaskListResponse::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::pai::pouw::task_info::TaskRecord& TaskListResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:pai.pouw.task_info.TaskListResponse.tasks)
  return _internal_tasks(index);
}
inline ::pai::pouw::task_info::TaskRecord* TaskListResponse::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::pai::pouw::task_info::TaskRecord* TaskListResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:pai.pouw.task_info.TaskListResponse.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pai::pouw::task_info::TaskRecord >&
TaskListResponse::tasks() const {
  // @@protoc_insertion_point(field_list:pai.pouw.task_info.TaskListResponse.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task_info
}  // namespace pouw
}  // namespace pai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pai::pouw::task_info::HTTPReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pai::pouw::task_info::HTTPReturnCode>() {
  return ::pai::pouw::task_info::HTTPReturnCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_5finfo_2eproto
