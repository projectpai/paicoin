syntax = "proto3";
import "google/protobuf/timestamp.proto";

package pai.pouw.task_info;


service TaskInfo {
    rpc GetWaitingTasks (TaskListRequest) returns (TaskListResponse);
    rpc GetStartedTasks (TaskListRequest) returns (TaskListResponse);
    rpc GetCompletedTasks (TaskListRequest) returns (TaskListResponse);
    rpc GetTaskDetails (TaskDetailsRequest) returns (TaskDetailsResponse);
    rpc GetTaskID (TaskIDRequest) returns (TaskIDResponse);
}


message TaskListRequest {
    uint32 page = 1;
    uint32 per_page = 2;
}

enum HTTPReturnCode {
    GENERAL_ERROR = 0;
    OK = 200;
    BAD_REQUEST = 400;
    NOT_FOUND = 404;
    INVALID = 422;
}

message TaskRecord {
    string task_id = 1;
    string model_type = 2;
    uint64 nodes_no = 3;
    uint32 batch_size = 4;
    string optimizer = 5;
    google.protobuf.Timestamp created = 6;
}

message TaskDetailsRequest {
    string task_id = 1;
}

message MetricAvgValue {
    string metric = 1;
    float avg_value = 2;
}

message EpochInfo {
    uint32 epoch_no = 1;
    repeated MetricAvgValue metrics = 2;
}

message EpochsDetails {
    uint32 total_epochs = 1;
    uint32 completed_epochs = 2;
    repeated EpochInfo epochs_metrics= 3;
}

message TaskDetailsResponse {
    HTTPReturnCode code = 1;
    string task_id = 2;
    string model_type = 3;
    uint64 nodes_no = 4;
    uint32 batch_size = 5;
    string optimizer = 6;
    google.protobuf.Timestamp created = 7;
    string dataset = 8;
    string initializer = 9;
    string loss_function = 10;
    float tau = 11;
    repeated string evaluation_metrics = 12;
    EpochsDetails epochs_info = 13;
}

message Pagination {
    uint32 page = 1;
    uint32 per_page = 2;
    uint32 page_count = 3;
    uint32 total_count = 4;

    message Navigation {
        string self = 1;
        string first = 2;
        string previous = 3;
        string next = 4;
        string last = 5;
    }
    Navigation navigation = 5;
}

message TaskListResponse {
    HTTPReturnCode code = 1;
    Pagination pagination = 2;
    repeated TaskRecord tasks = 3;
}

message TaskIDRequest {
    string msg_id = 1;
}

message TaskIDResponse {
    HTTPReturnCode code = 1;
    string task_id = 2;
}
